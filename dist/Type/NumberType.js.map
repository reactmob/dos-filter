{"version":3,"sources":["../../src/Type/NumberType.js"],"names":["FILTER_EQUAL","FILTER_NOT_EQUAL","FILTER_CONTAINS","FILTER_NOT_CONTAINS","FILTER_IN","FILTER_NOT_IN","FILTER_BETWEEN","FILTER_NOT_BETWEEN","FILTER_GREATER_THAN","FILTER_GREATER_THAN_EQUALS","FILTER_LESS_THAN","FILTER_LESS_THAN_EQUALS","NumberType","operator","indexOf","val","Array","isArray","validate","value","parseInt","isNaN","onChange","e","target","defaultOperator"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,OAArB;AACA,IAAMC,mBAAmB,WAAzB;AACA,IAAMC,kBAAkB,UAAxB;AACA,IAAMC,sBAAsB,cAA5B;AACA,IAAMC,YAAY,IAAlB;AACA,IAAMC,gBAAgB,QAAtB;AACA,IAAMC,iBAAiB,SAAvB;AACA,IAAMC,qBAAqB,aAA3B;AACA,IAAMC,sBAAsB,cAA5B;AACA,IAAMC,6BAA6B,qBAAnC;AACA,IAAMC,mBAAmB,WAAzB;AACA,IAAMC,0BAA0B,yBAAhC;;IAEqBC,U;;;;;;;;;;;;;AAGjB;;;uCAGe;AAAA;;AACX,oDACKZ,YADL,EACoB,OADpB,yBAEKC,gBAFL,EAEwB,WAFxB,yBAGKC,eAHL,EAGuB,UAHvB,yBAIKC,mBAJL,EAI2B,cAJ3B,yBAKKC,SALL,EAKiB,IALjB,yBAMKC,aANL,EAMqB,QANrB,yBAOKC,cAPL,EAOsB,SAPtB,yBAQKC,kBARL,EAQ0B,aAR1B,yBASKC,mBATL,EAS2B,cAT3B,yBAUKC,0BAVL,EAUkC,qBAVlC,yBAWKC,gBAXL,EAWwB,WAXxB,yBAYKC,uBAZL,EAY+B,kBAZ/B;AAcH;;AAED;;;;;;sCAGcE,Q,EAAU;AACpB,mBAAO,CAACP,cAAD,EAAiBC,kBAAjB,EAAqCO,OAArC,CAA6CD,QAA7C,MAA2D,CAAC,CAAnE;AACH;;AAED;;;;;;iCAGSE,G,EAAK;AACV,gBAAIC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACpB,uBAAO,CAAC,KAAKG,QAAL,CAAcH,IAAI,CAAJ,CAAd,CAAD,EAAwB,KAAKG,QAAL,CAAcH,IAAI,CAAJ,CAAd,CAAxB,CAAP;AACH;;AAED,gBAAMI,QAAQC,SAASL,GAAT,CAAd;;AAEA,mBAAOM,MAAMF,KAAN,IAAe,EAAf,GAAoBA,KAA3B;AACH;;AAED;;;;;;2CAGmBA,K,EAAOG,S,EAAU;AAChC,mBAAO,yCAAO,MAAK,QAAZ,EAAqB,OAAOH,KAA5B,EAAmC,UAAU,kBAACI,CAAD;AAAA,2BAAOD,UAASC,EAAEC,MAAF,CAASL,KAAlB,CAAP;AAAA,iBAA7C,GAAP;AACH;;;;;;AAhDgBP,U,CACVa,e,GAAkBzB,Y;kBADRY,U","file":"NumberType.js","sourcesContent":["import React from 'react';\nimport StringType  from './StringType';\n\nconst FILTER_EQUAL = 'EQUAL';\nconst FILTER_NOT_EQUAL = 'NOT_EQUAL';\nconst FILTER_CONTAINS = 'CONTAINS';\nconst FILTER_NOT_CONTAINS = 'NOT_CONTAINS';\nconst FILTER_IN = 'IN';\nconst FILTER_NOT_IN = 'NOT_IN';\nconst FILTER_BETWEEN = 'BETWEEN';\nconst FILTER_NOT_BETWEEN = 'NOT_BETWEEN';\nconst FILTER_GREATER_THAN = 'GREATER_THAN';\nconst FILTER_GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS';\nconst FILTER_LESS_THAN = 'LESS_THAN';\nconst FILTER_LESS_THAN_EQUALS = 'FILTER_LESS_THAN_EQUALS';\n\nexport default class NumberType extends StringType {\n    static defaultOperator = FILTER_EQUAL;\n\n    /**\n     * @inheritDoc\n     */\n    getOperators() {\n        return {\n            [FILTER_EQUAL]: 'EQUAL',\n            [FILTER_NOT_EQUAL]: 'NOT_EQUAL',\n            [FILTER_CONTAINS]: 'CONTAINS',\n            [FILTER_NOT_CONTAINS]: 'NOT_CONTAINS',\n            [FILTER_IN]: 'IN',\n            [FILTER_NOT_IN]: 'NOT_IN',\n            [FILTER_BETWEEN]: 'Between',\n            [FILTER_NOT_BETWEEN]: 'Not Between',\n            [FILTER_GREATER_THAN]: 'GREATER_THAN',\n            [FILTER_GREATER_THAN_EQUALS]: 'Greater than equals',\n            [FILTER_LESS_THAN]: 'LESS_THAN',\n            [FILTER_LESS_THAN_EQUALS]: 'Less than equals',\n        };\n    }\n\n    /**\n     * @inheritDoc\n     */\n    isSingleValue(operator) {\n        return [FILTER_BETWEEN, FILTER_NOT_BETWEEN].indexOf(operator) === -1;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    validate(val) {\n        if (Array.isArray(val)) {\n            return [this.validate(val[0]), this.validate(val[1])]\n        }\n\n        const value = parseInt(val);\n\n        return isNaN(value) ? '' : value;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    doRenderValueInput(value, onChange) {\n        return <input type=\"number\" value={value} onChange={(e) => onChange(e.target.value)}/>;\n    }\n}\n"]}