{"version":3,"sources":["../../../src/Type/SelectType/RemoteConfig.js"],"names":["RemoteConfig","props","cached","checkPropTypes","propTypes","key","defaultProps","value","length","Promise","resolve","fetch","then","response","json","fetcher","queryParam","oneOfType","string","func","instanceOf","url","isRequired","minChar","number","parser","delay","filter","bool","data","keyword"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Y;AAsBjB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,aAFnBC,MAEmB,GAFV,EAEU;;AACf,4BAAUC,cAAV,CAAyBH,aAAaI,SAAtC,EAAiDH,KAAjD,EAAwD,UAAxD,EAAoE,cAApE;;AAEA,aAAK,IAAII,GAAT,IAAgBL,aAAaM,YAA7B,EAA2C;AACvC,iBAAKD,GAAL,IAAYL,aAAaM,YAAb,CAA0BD,GAA1B,CAAZ;AACH;;AAED,aAAK,IAAIA,IAAT,IAAgBJ,KAAhB,EAAuB;AACnB,iBAAKI,IAAL,IAAYJ,MAAMI,IAAN,CAAZ;AACH;AACJ;;;;gCAEOE,K,EAAO;AAAA;;AACX,gBAAI,KAAKL,MAAL,CAAYM,MAAZ,IAAsB,CAAC,KAAK,QAAL,CAA3B,EAA2C;AACvC,uBAAOC,QAAQC,OAAR,CAAgB,KAAKR,MAArB,CAAP;AACH;;AAED,mBAAOS,MAAM,yBAAU,KAAK,KAAL,CAAV,EAAuB,KAAK,YAAL,EAAmBJ,KAAnB,CAAvB,CAAN,EACFK,IADE,CACG;AAAA,uBAAYC,SAASC,IAAT,EAAZ;AAAA,aADH,EAEFF,IAFE,CAEG,gBAAQ;AACV,uBAAO,MAAKV,MAAL,GAAc,MAAK,QAAL,EAAeY,IAAf,CAArB;AACH,aAJE,CAAP;AAKH;;;8BAEKP,K,EAAO;AACT,mBAAO,KAAKQ,OAAL,CAAaR,KAAb,CAAP;AACH;;;+BAEaN,K,EAAO;AACjB,mBAAO,IAAID,YAAJ,CAAiBC,KAAjB,CAAP;AACH;;;;;;AApDgBD,Y,CACVI,S,GAAY;AACfY,gBAAY,oBAAUC,SAAV,CAAoB,CAAC,oBAAUC,MAAX,EAAmB,oBAAUC,IAA7B,CAApB,CADG;AAEfJ,aAAS,oBAAUK,UAAV,CAAqBX,OAArB,CAFM;AAGfY,SAAK,oBAAUH,MAAV,CAAiBI,UAHP;AAIfC,aAAS,oBAAUC,MAJJ;AAKfC,YAAQ,oBAAUN,IALH;AAMfO,WAAO,oBAAUF,MANF;AAOf;AACAG,YAAQ,oBAAUC;AARH,C;AADF5B,Y,CAYVM,Y,GAAe;AAClBiB,aAAS,CADS;AAElBG,WAAO,GAFW;AAGlBC,YAAQ,KAHU;AAIlBF,YAAQ;AAAA,eAAQI,IAAR;AAAA,KAJU;AAKlBb,gBAAY;AAAA,eAAU,EAAEc,SAASvB,KAAX,EAAV;AAAA;AALM,C;kBAZLP,Y","file":"RemoteConfig.js","sourcesContent":["import 'whatwg-fetch'\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withQuery  from 'with-query';\n\nexport default class RemoteConfig {\n    static propTypes = {\n        queryParam: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        fetcher: PropTypes.instanceOf(Promise),\n        url: PropTypes.string.isRequired,\n        minChar: PropTypes.number,\n        parser: PropTypes.func,\n        delay: PropTypes.number,\n        // remote filter\n        filter: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        minChar: 3,\n        delay: 500,\n        filter: false,\n        parser: data => data,\n        queryParam: value => ({ keyword: value }),\n    };\n\n    cached = [];\n\n    constructor(props) {\n        PropTypes.checkPropTypes(RemoteConfig.propTypes, props, 'property', 'RemoteConfig');\n\n        for (let key in RemoteConfig.defaultProps) {\n            this[key] = RemoteConfig.defaultProps[key];\n        }\n\n        for (let key in props) {\n            this[key] = props[key];\n        }\n    }\n\n    fetcher(value) {\n        if (this.cached.length && !this['filter']) {\n            return Promise.resolve(this.cached);\n        }\n\n        return fetch(withQuery(this['url'], this['queryParam'](value)))\n            .then(response => response.json())\n            .then(json => {\n                return this.cached = this['parser'](json);\n            })\n    }\n\n    fetch(value) {\n        return this.fetcher(value)\n    }\n\n    static create(props) {\n        return new RemoteConfig(props);\n    }\n}\n"]}