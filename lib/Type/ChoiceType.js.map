{"version":3,"sources":["../../src/Type/ChoiceType.js"],"names":["FILTER_EQUAL","FILTER_NOT_EQUAL","FILTER_IN","FILTER_NOT_IN","ChoiceRemoteConfig","ChoiceType","props","items","remote","undefined","renderItem","item","getFieldValue","getFieldLabel","matchStateToTerm","value","toLowerCase","indexOf","valueField","displayField","isRemoteFilter","filter","minChar","length","isNotCorrectValue","state","operator","disabled","fetchRemote","delay","setState","fetch","then","data","onChange","listProps","e","onBlur","target","defaultOperator","propTypes","oneOfType","string","func","instanceOf","object","arrayOf","isRequired","defaultProps"],"mappings":"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","file":"ChoiceType.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete  from 'react-autocomplete';\nimport { debounce } from 'throttle-debounce';\nimport AbstractType  from './AbstractType';\nimport RemoteConfig from './ChoiceType/RemoteConfig';\n\nconst FILTER_EQUAL = 'EQUAL';\nconst FILTER_NOT_EQUAL = 'NOT_EQUAL';\nconst FILTER_IN = 'IN';\nconst FILTER_NOT_IN = 'NOT_IN';\n\nexport const ChoiceRemoteConfig = RemoteConfig;\n\nexport default class ChoiceType extends AbstractType {\n    static defaultOperator = FILTER_EQUAL;\n\n    static propTypes = {\n        displayField: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        valueField: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        remote: PropTypes.instanceOf(RemoteConfig),\n        listProps: PropTypes.object,\n        items: PropTypes.oneOfType([\n            PropTypes.instanceOf(RemoteConfig),\n            PropTypes.arrayOf(PropTypes.object)\n        ]).isRequired,\n    };\n\n    static defaultProps = {\n        valueField: 'id',\n        displayField: 'label',\n    };\n\n    items = [];\n    remote = undefined;\n\n    constructor(props) {\n        super(props);\n\n        this.remote = props.remote;\n        this.items = props.items;\n\n        if (props.items instanceof RemoteConfig) {\n            this.remote = props.items;\n            this.items = [];\n        }\n\n        this.state = {\n            value: props.value,\n            operator: props.operator,\n            items: this.items,\n            disabled: false,\n        };\n\n        if (this.remote) {\n            this.fetchRemote = debounce(this.remote.delay, false, (value) => {\n                this.setState({ disabled: true });\n\n                this.remote.fetch(value).then(data => {\n                    this.setState({ disabled: false, items: data });\n                });\n            })\n        }\n    }\n\n    componentWillMount() {\n        this.fetchRemote();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getOperators() {\n        return {\n            [FILTER_EQUAL]: 'Equal',\n            [FILTER_NOT_EQUAL]: 'Not Equal',\n            [FILTER_IN]: 'In',\n            [FILTER_NOT_IN]: 'Not In',\n        };\n    }\n\n    renderItem = (item) => {\n        return <div key={this.getFieldValue(item)}>{this.getFieldLabel(item)}</div>;\n    };\n\n    matchStateToTerm = (item, value) => {\n        return this.getFieldLabel(item)\n                .toLowerCase()\n                .indexOf(value.toLowerCase()) !== -1\n            ;\n    };\n\n    getFieldValue = (item) => {\n        const { valueField } = this.props;\n\n        if (typeof valueField === 'function') {\n            return valueField(item);\n        }\n\n        return item[valueField];\n    };\n\n    getFieldLabel = (item) => {\n        const { displayField } = this.props;\n\n        if (typeof displayField === 'function') {\n            return displayField(item);\n        }\n\n        return item[displayField];\n    };\n\n    isRemoteFilter = (value) => {\n        return this.remote && this.remote.filter && this.remote.minChar <= value.length;\n    };\n\n    isNotCorrectValue = (value) => {\n        const { items } = this.state;\n\n        return value && !items.filter(item => this.getFieldLabel(item) === value).length\n    };\n\n    /**\n     * @inheritDoc\n     */\n    doRenderValueInput(value, onChange) {\n        const { listProps } = this.props;\n        const { items, disabled } = this.state;\n\n        return <Autocomplete\n            items={items}\n            value={value}\n            getItemValue={this.getFieldLabel}\n            renderItem={this.renderItem}\n            shouldItemRender={this.remote ? undefined : this.matchStateToTerm}\n\n            onChange={(e, value) => {\n                this.setState({ value });\n\n                if (this.isRemoteFilter(value)) {\n                    this.fetchRemote(value);\n                }\n            }}\n\n            onSelect={(value, item) => {\n                // filter value\n                onChange(this.getFieldValue(item));\n\n                // textfield value\n                this.setState({ value });\n            }}\n\n            inputProps={{\n                disabled: disabled,\n                onBlur: (e) => {\n                    if (this.isNotCorrectValue(e.target.value)) {\n                        this.setState({ value: '' });\n                    }\n                }\n            }}\n\n            {...listProps}\n        />\n    }\n}\n"]}